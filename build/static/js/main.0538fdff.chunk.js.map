{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["dateTimeFormat","nativeTokens","nativeTokenIds","App","props","web3Eth","Web3","providers","HttpProvider","web3s","fetchBalances","bind","reportError","fetchHistoryPrice","state","balances","nearestBlocks","time","undefined","blocks","address","window","localStorage","getItem","web3","unixTime","a","l","eth","getBlockNumber","h","m","Math","floor","getBlock","t","timestamp","this","setState","fetching","error","utils","isAddress","setItem","moment","toDate","getTime","k","findNearstBlock","block","blockTime","jobs","getBalance","err","balanceRaw","console","log","balance","fromWei","datetime","formatDate","price","chain","tokenSymbol","tokenName","contract","i","tokenList","length","batches","BatchRequest","j","id","symbol","name","platforms","contractAddress","trim","Contract","erc20abi","add","methods","balanceOf","call","request","decimals","divisor","toBN","pow","dec","div","fra","mod","toString","execute","message","date","url","fetch","data","json","dataJson","market_data","current_price","usd","d","Date","month","getMonth","day","getDate","year","getFullYear","join","stopFetching","className","Container","tectclassName","Message","positive","Header","List","as","Item","href","Input","value","disabled","placeholder","size","fluid","focus","icon","onChange","e","iconPosition","style","display","Object","keys","map","paddingRight","type","Button","inverted","color","content","loading","onClick","textAlign","Table","celled","Row","HeaderCell","Body","Cell","toFixed","toUpperCase","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0538fdff.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport tokenList from './tokenlist.json';\nimport erc20abi from './erc20.abi.json';\nimport { Input, Button, Container, Header, Table, Message, List } from 'semantic-ui-react'\nimport { DateTimeInput } from 'semantic-ui-calendar-react';\nimport moment from 'moment';\n\n// const tokenList = [{\"id\":\"kyber-network\",\"symbol\":\"kncl\",\"name\":\"Kyber Network Crystal Legacy\",\"platforms\":{\"ethereum\":\"0xdd974d5c2e2928dea5f71b9825b8b646686bd200\",\"fantom\":\"0x765277eebeca2e31912c9946eae1021199b39c61\",\"harmony-shard-0\":\"0x0a47d2dc4b7ee3d4d7fd471d993b0821621e1769\"}}];\n\nconst dateTimeFormat = \"DD-MM-YYYY HH:mm Z\";\nconst nativeTokens = {\n  \"ethereum\": \"eth\",\n  \"polygon-pos\": \"matic\",\n};\nconst nativeTokenIds = {\n  \"ethereum\": \"ethereum\",\n  \"polygon-pos\": \"matic-network\",\n};\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // this.web3Eth = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/06be4b923b9446b8bec846a81e356f81\")); \n    this.web3Eth = new Web3(new Web3.providers.HttpProvider(\"https://eth-mainnet.alchemyapi.io/v2/fJR25Od4foGhVrli2OCxRjmP5pkNhg1O\")); \n    this.web3s = {\n      \"ethereum\": this.web3Eth,\n      // https://polygon-mainnet.infura.io/v3/06be4b923b9446b8bec846a81e356f81\n      \"polygon-pos\": new Web3(new Web3.providers.HttpProvider(\"https://polygon-mainnet.g.alchemy.com/v2/4IApMoKFRmy2g8eFrFV9uGxBf6j8wM7Y\")),\n    };\n\n    this.fetchBalances = this.fetchBalances.bind(this);\n    this.reportError = this.reportError.bind(this);\n    this.fetchHistoryPrice = this.fetchHistoryPrice.bind(this);\n\n    this.state = {\n      balances: [],\n      nearestBlocks: {},\n      time: undefined,\n      blocks: {},\n      address: window.localStorage.getItem(\"address\"),\n    }\n  }\n\n  async findNearstBlock(web3, unixTime) {\n    let l = 0;\n    let h = await web3.eth.getBlockNumber();\n    \n    while (l < h) {\n      let m = Math.floor((l + h) / 2);\n      let t = (await web3.eth.getBlock(m)).timestamp;\n      if (t === unixTime) return m;\n      if (t > unixTime) h = m - 1;\n        else l = m + 1;\n    }\n    return l;\n  }\n\n  async fetchBalances() {\n    this.setState({\n      fetching: true,\n      error: undefined,\n      balances: [],\n      nearestBlocks: {},\n    });\n    \n    if (!this.web3Eth.utils.isAddress(this.state.address)) {\n      this.reportError(\"Wrong address\");\n      return;\n    }\n    window.localStorage.setItem(\"address\", this.state.address);\n\n    try {\n      let time = moment(this.state.time, dateTimeFormat).toDate().getTime() / 1000;\n      let nearestBlocks = {};\n      for (let k in this.web3s) {\n        let block = this.state.blocks[k] || (time ? await this.findNearstBlock(this.web3s[k], time) : (await this.web3s[k].eth.getBlockNumber()));\n        let blockTime = (await this.web3s[k].eth.getBlock(block)).timestamp;\n        nearestBlocks[k] = {\n          \"block\": block,\n          \"time\": blockTime,\n        };\n      };\n      this.setState({nearestBlocks});\n\n      this.jobs = 0;\n     // Native tokens\n      for (let k in this.web3s) {\n          let block = nearestBlocks[k]?.block ?? \"latest\";\n          this.web3s[k].eth.getBalance(this.state.address, block, async (err, balanceRaw) => {\n            if (err) {\n              console.log(err, this.state.address, block);\n              // this.reportError(err.message, false);\n            } else if (balanceRaw && balanceRaw !== \"0\") {\n              let balance = this.web3s[k].utils.fromWei(balanceRaw);\n\n              let datetime = this.formatDate(nearestBlocks[k].time);\n              let price = await this.fetchHistoryPrice(nativeTokenIds[k], datetime);\n\n              this.setState({balances: [\n                ...this.state.balances,\n                {\n                  chain: k,\n                  block: block,\n                  time: nearestBlocks[k].time,\n                  tokenSymbol: nativeTokens[k],\n                  tokenName: k,\n                  contract: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n                  balance: balance,\n                  price: price,\n                }\n              ]})\n            }\n          })\n      }\n      \n      // Fetch by batchs\n      let batchSize = 100;\n      for (let i = 0; i < tokenList.length; i+=batchSize) {\n        let batches = {};\n        for (let k in this.web3s) {\n          batches[k] = new this.web3s[k].BatchRequest();\n        }\n\n        for (let j = i; j < tokenList.length && j < i+batchSize; j += 1) {\n          let {id, symbol, name, platforms} = tokenList[j];\n          \n          for (let k in this.web3s) {\n            let datetime = this.formatDate(nearestBlocks[k].time);\n            \n            if (platforms[k]) {\n              let block = nearestBlocks[k]?.block ?? \"latest\";\n              let contractAddress = platforms[k].trim();\n              let contract = new this.web3s[k].eth.Contract(erc20abi, contractAddress);\n\n              this.jobs ++;\n              batches[k].add(\n                contract.methods.balanceOf(this.state.address).call.request({}, block, async (err, balanceRaw) => {\n                  if (err) {\n                    console.log(err, contractAddress, this.state.address, block);\n                    // this.reportError(err.message, false);\n                  } else if (balanceRaw && balanceRaw !== \"0\") {\n                    let price = await this.fetchHistoryPrice(id, datetime);\n\n                    let decimals = await contract.methods.decimals().call();\n                    let divisor = this.web3s[k].utils.toBN(10).pow(this.web3s[k].utils.toBN(decimals));\n                    let dec = this.web3s[k].utils.toBN(balanceRaw).div(divisor);\n                    let fra = this.web3s[k].utils.toBN(balanceRaw).mod(divisor);\n                    let balance = dec.toString() + \".\" + fra.toString();\n\n                    this.setState({balances: [\n                      ...this.state.balances,\n                      {\n                        chain: k,\n                        block: block,\n                        time: datetime,\n                        tokenSymbol: symbol,\n                        tokenName: name,\n                        contract: contractAddress,\n                        balance: balance,\n                        price: price,\n                      }\n                    ]})\n                    console.log(symbol, name, contractAddress, err, balanceRaw, decimals, balance, price);\n                  }\n                  this.jobs --;\n                  if (this.jobs === 0) {\n                    this.setState({fetching: false});\n                  }\n                })\n              );\n            }\n          }\n        }\n\n        for (let k in this.web3s) {\n          batches[k].execute();\n        }\n      };\n    } catch (e) {\n      this.reportError(e.message);\n    }\n  }\n\n\n  async fetchHistoryPrice(id, date) {\n    let url = `https://api.coingecko.com/api/v3/coins/${id}/history?date=${date}`;\n    let data = await fetch(url);\n    let dataJson = await data.json();\n    return dataJson?.market_data?.current_price?.usd;\n  }\n\n  formatDate(date) {\n    var dateOffset = 24*60*60*1000; //1 days\n    // Get price from the previous day\n    var d = new Date(date * 1000 - dateOffset),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [day, month, year].join('-');\n}\n\n\n  reportError(err, stopFetching=false) {\n    this.setState({\n      fetching: stopFetching,\n      error: err,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container tectclassName=\"App-header\">\n          <Message positive>\n            <Message.Header>Welcome </Message.Header>\n            <List as='ul'>\n              <List.Item as='li'>Fetching balances by datetime may take time, please be patient</List.Item>\n              <List.Item as='li'>Leaving the datetime and block empty for the latest block data</List.Item>\n              <List.Item as='li'>Block is used if both block and datetime exist</List.Item>\n            </List>\n\n            <i>If you have any issue, ping me at <a href = \"mailto: nvdung149@gmail.com\">nvdung149@gmail.com</a></i>\n          </Message>\n          \n          <Input value={this.state.address} disabled={this.state.fetching} placeholder='Input the address to check ...' size=\"large\" fluid focus icon=\"search\" onChange={(e, data) => {\n            this.setState({ address: data.value });\n          }}/>  \n\n          <br/>\n          <DateTimeInput\n            fluid\n            name=\"Select time\"\n            placeholder=\"Select time\"\n            value={this.state.time}\n            iconPosition=\"left\"\n            dateTimeFormat={dateTimeFormat}\n            onChange={(e, data) => {\n              this.setState({ time: data.value });\n            }}\n            disabled={this.state.fetching}\n          />\n\n          <br/>\n          <div style={{display: \"flex\"}}>\n            {Object.keys(this.web3s).map(chain => (\n              <div style={{paddingRight: \"20px\"}} key={chain}>\n                <b>{`${chain}`}</b>\n                <br/>\n                <Input disabled={this.state.fetching} placeholder={`${chain} block`} size=\"large\" type=\"number\" onChange={(e, data) => {\n                  this.setState({ blocks: {...this.state.blocks, [chain]: data.value} });\n                }}/> \n              </div> \n            ))}\n          </div>\n\n          <br/>\n          <Button inverted color='green' content='Get Balances' fluid disabled={this.state.fetching} loading={this.state.fetching} onClick={this.fetchBalances}/>\n\n          {this.state.error && \n            <Header as='h5' textAlign='center' inverted color='red'>\n              {this.state.error}\n            </Header>\n          }\n\n          <br/>\n          <div>\n            {Object.keys(this.state.nearestBlocks).map((k) => {\n              return (\n                <p key={k}>\n                  <span>{k}: </span>\n                  <span>Block {this.state.nearestBlocks[k].block}</span>\n                  <span>- Estimated time: {new Date(this.state.nearestBlocks[k].time * 1000).toString()}</span>\n                </p>\n              );\n            })}\n          </div>\n\n          <br/>\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Chain</Table.HeaderCell>\n                <Table.HeaderCell>Block</Table.HeaderCell>\n                <Table.HeaderCell>Date</Table.HeaderCell>\n                <Table.HeaderCell>Token name</Table.HeaderCell>\n                <Table.HeaderCell>Price (USD)</Table.HeaderCell>\n                <Table.HeaderCell>Balance</Table.HeaderCell>\n                <Table.HeaderCell>Total Value (USD)</Table.HeaderCell>\n                <Table.HeaderCell>Token symbol</Table.HeaderCell>\n                <Table.HeaderCell>Contract</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {this.state.balances.map(({chain, time, price, block, tokenSymbol, tokenName, balance, contract}) => (\n                <Table.Row>\n                  <Table.Cell>{chain}</Table.Cell>\n                  <Table.Cell>{block}</Table.Cell>\n                  <Table.Cell>{time}</Table.Cell>\n                  <Table.Cell>{tokenName}</Table.Cell>\n                  <Table.Cell>${price?.toFixed(2) ?? \"-\"}</Table.Cell>\n                  <Table.Cell>{balance}</Table.Cell>\n                  <Table.Cell>${(price ?? 0) * balance}</Table.Cell>\n                  <Table.Cell>{tokenSymbol.toUpperCase()}</Table.Cell>\n                  <Table.Cell>{contract}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n\n        </Container>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}